making changes in eth state = cost eth
fetching data from eth = no fee
----
 Private blockchain anf truffle
 migrating Faucet to blockchain
 website will contain > json file (ABI: application binary interface) 
         with meta info about our smart contract that will be deployed on blockchain
 to communicate to the smart contract deployed on blockchain,
 we need
 meta data of smart contract that will store
        1. on which address smart contract reside 0x23jbh423jh423hj4v2hj334verwkj 
        2. byte code
 SO
 FaucetContract.sol <converted/compiled to> json(ABI) file(which will contain byte code and metadata) <byte code is sent/migrated to> blockchain
 STEP 1 : write the smart contract FaucetContract.sol in contracts folder
        // contract name = contract contractName{}
 STEP 2 : in command line 'truffle compile' <> compile .sol to .json(which will contain byte code)
 STEP 3 : Specify migration in migration folder with a=name "2_faucet_migration.js"
        
                            // give access tosmart contract byte code
                            // const FaucetContract = artifact.require("Faucet");
                            // 
                            // module.exports = function (deployer){
                                      // deployer.deploy(FaucetContract)
                            // }
 STEP 4 : runc "truffle migrate"
---
web3.js : collection pf libs that allow interaction with local or remote ETH node using protocols [http,ipc,webSocket]

under terminal
          "truffle console"

get instance of ABI of smart-contract   
       syntax : const instance = new web3.eth.Contract(ABI of contract , address of smart contract in blockchain)
          const instance = new web3.eth.Contract(Faucet.abi, "0x2B437EC1E890E2858Cd4BE19c0A8143e7d7BcaE5")

       get address from ganache/contracts/Faucet/Address

not lets access variable funds data from smart-contract instance
       (here, funds() function is created by solidity to return data in variable "funds")
       (here, counter() function is created by solidity to return data in variable "counter")
       (here, test() function is created by solidity to return data in variable "test")
       
       const funds = await instance.methods.funds().call();
       const counter = await instance.methods.counter().call()
       const test = await instance.methods.test().call()

       funds
              output: 1000
       counter
              output: -20
       test
              output: 4294967295
---
get ether into smart-contract
"
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;

contract Faucet{
 
 function addFunds() external payable {

 }
}
"

now migrate it to blockchain 
       "truffle migrate --reset"
         METHOD 1                   
                                   "truffle console"
                                   "const instance = await Faucet.deployed()"
                                   "instance.addFunds({value : "2000000000000000000"})"

                                   above value is not in ether but in wei.

                            output: 
                                   {
                                     tx: '0xd17f3b2fb584d59ba673f594010a07264bea53414fca28675f26a572d1f1cbd7',
                                     receipt: {
                                       transactionHash: '0xd17f3b2fb584d59ba673f594010a07264bea53414fca28675f26a572d1f1cbd7',
                                       transactionIndex: 0,
                                       blockHash: '0x09dd6cc9e3e45fb076377a6a72040c0c5952d269de0b1b0441106e321fbdc187',
                                       blockNumber: 17,
                                       from: '0x7e449a63fdfd47663a029990bc12ba563baf600d',
                                       to: '0x3e5ca378f68aac01a5ca427be36107f9fd5066aa',
                                       gasUsed: 21167,
                                       cumulativeGasUsed: 21167,
                                       contractAddress: null,
                                       logs: [],
                                       status: true,
                                       logsBloom: '0x
                                       rawLogs: []
                                     },
                                     logs: []
                                   }

                            confirm it in ganache/contracts/faucet will have 2 ether
       METHOD 2
                            "truffle console"
                            web3.eth.sendTransaction({from: accounts[0], to: "0x3E5Ca378F68AaC01a5CA427BE36107F9FD5066AA",data: "0xa26759cb",value: "1000000000000000000"})

                            where:
                                   from: address of account from which to withdraw
                                   to: address of smart-contract to which eth need to transfered
                                   data: "0x"+"first 4 byte (first 8 characters) of "addFund()" in form of Keccak-256"   [link: https://emn178.github.io/online-tools/keccak_256.html]
                                   value: ether in wei    [link : https://eth-converter.com/]
realise that when u search a26759cb in /build/contract/Faucet.json the byte code will have it 

---

types of function
       1 payable     (used to change state of eth, get some eth as transaction)
       2 view , pure(used to fetch data from eth network)
                     view - indicate that function will not alter state of eth in any way
                     pure - wont event read the storage state
       example :
       function fname() external pure returns(uint){      return (2+2);      }

----
type of call
       1 write only call = no gass fee
       2 transactions = generate state changes and require eth
----
Add 2+2 using eth network

// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;

contract Faucet{
 
 function addFunds() external payable { }

 function add() external pure returns(uint){
           return (2+2); 
 }
}

"truffle migrate --reset"
"truffle console"
"const instance = await Faucet.deployed()"
"const result await instance.add()"
result
              >BN { negative: 0, words: [ 4, <1 empty item> ], length: 1, red: null }
result.toString()
              >4

---
JSON-RPC http calls - helps to talk to a node in eth network
under truffle console
"accounts"
return array of address of account in ganash
---
add two number (numbers given while calling function in truffle)

// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;

contract Faucet{
 
 function addFunds() external payable { }

 function addConst() external pure returns(uint){
           return (2+2); 
 }
 function addVar(uint a,uint b) external pure returns(uint){
           return (a+b); 
 }
}



 "truffle migrate --reset"
 "truffle console"
 "const instance = await Faucet.deployed()"
 "const result = await instance.addVar(2,8)"
 "result"
 "result.toString()"
 ----------

// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;

contract Faucet{

 address[] public funders; 
 function addFunds() external payable {
      funders.push(msg.sender);
  }
 function getFunders() public view returns(address[] memory){
      return funders;
  }
 
 function getFundersAtIndex(uint index) external view returns(address){
    address[] memory _funders = getFunders();
    return _funders[index];
 }
}

// add Funds to smart-contract from account 0 ,1,2,3
// show list of address of wallet of people who has funded us using  getFunders()


// public function = function be called inside of the smart-contract also
// external function = function cannot be called inside of the smart-contract and can only be called from outside using truffle instance of smart-contract (const instance = await Faucet.deployed()) 
// u can use this.theExternalFunction() if there is an emence need to call a external function from withing the smart contract but this will increase the gas fee
// address[] = is a array type that store address of eth wallets
//           defined public 
//           "funders" is the array name

// getFunders() function
//        external = can be called in truffle console using smart-contract instance
//        view = indicate that we can viewdata
//        returns an array that will have address of wallet from "memory" of eth-network where smart-contract is placed


// funders.push(msg.sender); = each time addFunds function gets called , address of sender is pushed(appended) into "funder array";

// truffle migrate --reset
// truffle console
// const instance = await Faucet.deployed()

// instance.addFunds({ value: "292929292" , from: accounts[0] })
// instance.addFunds({ value: "292929292" , from: accounts[1] })
// instance.addFunds({ value: "292929292" , from: accounts[2] })
// instance.addFunds({ value: "292929292" , from: accounts[3] })
// instance.addFunds({ value: "292929292" , from: accounts[4] })
// instance.addFunds({ value: "292929292" , from: accounts[5] })

// instance.getFunders();
          // [
          //   '0xA507185e878E238d9315a3DfDa4eC6d9CB739345',
          //   '0xe4B63CF1c3DC35B097113993d658288FDd43FF30',
          //   '0xB358DF1732f9AcCd3B84323953204F597e9272B3'
          // ]
// instance.getFundersAtIndex(0);
// '0xA507185e878E238d9315a3DfDa4eC6d9CB739345'
// here wai worth "292929292" is sent from account 0,1,2,3,4 in GANACHE(test net) to smart-contract, 

// where we are saving address of sender each time we recieve a fund

// add Funds to smart-contract from account 0 ,1,2,3
// show list of address of wallet of people who has funded us using  getFunders()

-------------